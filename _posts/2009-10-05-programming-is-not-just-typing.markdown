---
layout: post
title: "Programming is Not Just Typing"
date: 2009-10-05 09:10:00 -0400
comments: true
published: true
categories: ["Archive"]
tags: ["Software Development"]
permalink: "/post/Programming-is-Not-Just-Typing/"
---

<p>One of my favorite quotes about programming languages comes from Ward Cunningham who said, &ldquo;If you don't think carefully, you might think that programming is just typing statements in a programming language.&rdquo; Not sure if he really said it, but it is attributed to him plenty of times on the Internet.</p>
<p>So back to Ward Cunningham for a minute. I really like that quote. It says one very powerful thing about programming that I think is known by a lot of people using programming languages, but I am not always sure they think about it in this manner. I know that non-programmers certainly don&rsquo;t understand it. Plenty of people think that all we do all day is type, but there&rsquo;s a heck of a lot more to it than that.</p>
<p>Nearly a year ago, when Jeff Atwood posted about our being <a href="http://www.codinghorror.com/blog/archives/001188.html" target="_blank">Typists First and Programmers Second</a>, I was quite appalled. Here is one of the most respected individuals in our industry, and he&rsquo;s making a statement like this in a blog post. Sure I agree that one of the core skills that every programmer needs is the ability to type. I don&rsquo;t disagree with the importance of typing. I think a programmers ability to quite quickly and accurately is extremely important. He says in the post that there are other things of importance, but I refuse to say that our primary skill is typing.</p>
<p>Although I find that programmers should spend some time thinking and some time typing. If you&rsquo;re typing non-stop as fast as you can then you&rsquo;re probably not thinking enough about <em>what</em> you&rsquo;re typing.</p>
<blockquote>
<p>Like broken clocks, even pointy-haired managers are right once a day. <strong>Coding is just typing.</strong></p>
</blockquote>
<p>This is a bit crazy to me since I work on code every day. I can certainly say that coding is <em>not</em> just typing. This is one of the reasons why I am an advocate of pair programming. I think that a fair amount of time needs to be spent thinking. All programmers need to be able to type quickly, but the core of what we do is the thought and design that goes into making an application that we can be proud.</p>
<p>Don&rsquo;t get me wrong I have the highest respect for Jeff Atwood. I think he is one of the greats. I just disagree with the priorities here. I believe that a developer can certainly benefit from typing faster. In fact I wish I did type faster. I certainly don&rsquo;t hunt and peck. I&rsquo;ve typed without looking at the keys since I was a kid. I can touch-type the &ldquo;correct&rdquo; way, but I have my own style that has worked for me since i was a kid.</p>
<p>Most of the development I do these days is pair programming. An Extreme Programming technique I am sure most of you have at least heard of. This technique is an excellent one that I believe <em>produces better software</em>. Why? Well for one because it lets developers spend more time <em>thinking</em> and less time <em>typing</em>. Both guys are thinking, but about different things. One developer has the keyboard at any given time and keeps in his head the path he is on. (This guy is concerned with typing speed.) He types along the path thinking about the code he is currently writing not the structure of the app, but the code he is typing right now. For a short time his typing speed matters.</p>
<p>The programmer in the pair who is not actively typing is spending all of his time thinking. He keeps in his head the path that the typist is taking, not concerned with the syntax of the programming language. That is the other guy thinking about the language syntax. The one sitting back without the keyboard is the guide. He must make sure that the pair stays on the right path using the most efficient route to success.</p>
<p>By spending time thinking the pair is able to take the smarter path to their goal. Rather than brute-force typing speed we use intelligence of our development team to ensure successful work. This isn&rsquo;t to say that we shouldn&rsquo;t type <em>very very fast</em>, because typing fast sure does help us be better developers. However, more important than our typing speed is our thinking speed.</p>
<p>If you&rsquo;re considering your typing speed to be more important than your thinking speed then I am concerned to see how you&rsquo;ve structured your code in such a way that you <em>need</em> to type very fast. I find that well structured code requires a lot less typing and a lot more thinking.</p>
<p>If you pause and consider for a minute who are the most revered of developers in the world. Do they type fast? I bet most of them do. Is that why we revere them? No probably not. The greatest of people who code are some of the greatest <em>minds</em> in our industry. They are not the greatest <em>typists</em> in our industry. If you could type 200 WPM do you really think your code would be <em>that</em> much better? I doubt a developer could get more than a 10 or 15 percent increase in efficiency even typing that fast. But if you could <em>think </em>twice as fast I am sure you would see a much larger increase in how efficiently you wrote code.</p>
<p>Good luck with either endeavor, but don&rsquo;t tell me I&rsquo;m a typist. I am a thinker first and a typist second, and I refuse to let anyone tell me otherwise. Just because someone can type and <em>knows</em> a programming language does <em>not</em> mean that they can create software of any value.</p>
