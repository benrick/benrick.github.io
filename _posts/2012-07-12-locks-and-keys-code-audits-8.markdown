---
layout: post
title: "Locks and Keys - Code Audits #8"
date: 2012-07-12 10:00:00 -0400
comments: true
published: true
categories: ["blog", "archives"]
tags: ["Blog"]
alias: ["/post/Locks-and-Keys-Code-Audits-8", "/post/locks-and-keys-code-audits-8"]
---
<!-- more -->
{% include imported_disclaimer.html %}
<p>In software development, it is common to have users authenticate using usernames and passwords. In order to handle the authentication process, we must store this information in some way. Obvious, <a href="http://brendan.enrick.com/post/Security-Policies-Code-Audits-7.aspx">passwords should never be stored in clear text</a>. Toward that end, when we store them, we encrypt, hash, salt, etc. to keep them safe. </p>  <p>While these steps cannot protect against all forms of attack, they’re a good base of protection to have in place. We don’t want to just give this information away to anyone who wants it. Yes, some people could take the non-clear-text passwords and obtain the original password from it, but we’ve certainly set the barrier higher. </p>  <p>Security is all about setting more and larger hurdles in place for people to jump over. The only secure information is information that doesn’t exist, and that becomes inherently insecure as soon as it does exist. If information is accessible to someone, it means that it’s possible for someone else to access that information also. </p>  <p>We just try to make things more difficult and limit that damage. Or at least some of us do. </p>  <p>I’ve made plenty of my own mistakes in the past. Some of the applications I wrote in college have security holes, which seem glaring to me now, but I’d not even noticed at the time I wrote the code. I’m sure that most people reading this would say the same thing about their own code.</p>  <h3>The Bad</h3>  <p>One of the systems I had the pleasure of seeing the code for, at its core, was a customer portal. It even had its own custom ecommerce solution. (These details while talking about security issues will have some of you facepalming already.)</p>  <p>The developers knew that they needed to encrypt the passwords, so they wrote some sql, <em>dbo.encrypt</em>, to encrypt passwords before storing them in the database. Insert a password and out comes a jumbled mess that no one could read. </p>  <p>Users will often forget passwords, and will need some way of recovering from this situation. <a href="http://brendan.enrick.com/post/Handling-Password-Recovery.aspx">I recommend resetting passwords</a> when this happens. This application took a different approach.</p>  <p>Also stored in the database was some other useful sql, <em>dbo.decrypt</em>, which would take any of the encrypted passwords and decrypt them. Well that’s obviously a security issue, but the worst thing about this isn’t just that it’s reversible. It’s that this is also in the database. That means that we have the lock and the key together. If someone gets read-only database access, but not access to the application’s source code, they still have <em><strong>everything</strong></em>.</p>  <p>It’s like have a lock and keeping the key inside the lock for convenience. I wouldn’t want to have to call a locksmith if I ever lost the key, so I just keep it here. It makes opening the lock faster too!</p>  <h3>The Better</h3>  <p>Don’t allow reversing of stored passwords. Use 1-way only when dealing with passwords. This way brute force techniques are required to figure out a password. </p>  <p>If the system can reverse the password back to the original, anyone who has obtained access to the system can retrieve <em>all</em> of the passwords.</p>  <p>This isn’t a new idea. You’re not the first developer to set up authentication in an application. There are plenty of existing authentication systems out there. Don’t reinvent the wheel if you don’t have to. Some systems are safer than others. Ask around. Talk with security experts (I am not one of them) about these if your application requires really high hurdles.</p>  <h3>More Code Audit Nuggets</h3>  <p>Keep watching for more interesting nuggets of stuff that I’ve seen in codebases.</p>
