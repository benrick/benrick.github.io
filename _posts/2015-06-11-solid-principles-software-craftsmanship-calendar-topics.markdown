---
layout: post
title: "SOLID Principles – Software Craftsmanship Calendar Topics"
date: 2015-06-11 14:00:00 -0400
comments: true
published: true
categories: ["blog", "archives"]
tags: ["Blog"]
alias: ["/post/SOLID-Principles-Software-Craftsmanship-Calendar-Topics", "/post/solid-principles-software-craftsmanship-calendar-topics"]
---
<!-- more -->
{% include imported_disclaimer.html %}
<p>The SOLID Principles are a set of Object Oriented Design Principles that are very interrelated and when followed can improve your code. Additionally, they make a great acronym that implies the benefits of using the principles. In 2011, at NimblePros, we made a calendar of Software Craftsmanship Principles and made humorous images to go along with them. We continued making the calendar for three more years and then <a href="http://brendan.enrick.com/post/2015-Software-Craftsmanship-Calendar" target="_blank">missed 2015</a>. Now we’re making a <a href="http://brendan.enrick.com/post/2016-Software-Craftsmanship-Calendar" target="_blank">software craftsmanship calendar for 2016</a>. Please <a href="https://www.kickstarter.com/projects/988315286/software-craftsmanship-calendar-2016" target="_blank">back the calendar on Kickstarter</a>, so there will be a 2016 edition.</p> <h3>Single Responsibility Principle</h3> <p>While it might seem useful at the time to just keep this stuff together, you may eventually realize it isn’t.</p> <p><a href="http://brendan.enrick.com/image.axd?picture=SingleResponsibilityPrinciple.jpg"><img title="SingleResponsibilityPrinciple" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="SingleResponsibilityPrinciple" src="http://brendan.enrick.com/image.axd?picture=SingleResponsibilityPrinciple_thumb.jpg" width="484" height="484"></a> </p> <p><em>Avoid tightly coupling your tools together.</em></p> <h3>Open Closed Principle</h3> <p>It’s important that your code be open to extension while being closed to modification. This means that you should be able to add additional functionality without significantly altering the existing functionality. Remember the dangers of changing code; bugs can easily be created.</p> <p><a href="http://brendan.enrick.com/image.axd?picture=OpenClosedPrinciple.jpg"><img title="OpenClosedPrinciple" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="OpenClosedPrinciple" src="http://brendan.enrick.com/image.axd?picture=OpenClosedPrinciple_thumb.jpg" width="485" height="484"></a> </p> <p><em>Brain surgery is not necessary when putting on a hat.</em></p> <h3>Liskov Substitution Principle</h3> <p>Any class implementing an interface needs to be substitutable for that interface. For example, you can’t have missing functionality when implementing your interface, or it’s not really substitutable. Developers shouldn’t need to be careful about using a specific implementation of an interface. That was the point of using an interface.</p> <p><a href="http://brendan.enrick.com/image.axd?picture=LiskovSubstitutionPrinciple.jpg"><img title="LiskovSubstitutionPrinciple" style="border-left-width: 0px; border-right-width: 0px; border-bottom-width: 0px; display: inline; border-top-width: 0px" border="0" alt="LiskovSubstitutionPrinciple" src="http://brendan.enrick.com/image.axd?picture=LiskovSubstitutionPrinciple_thumb.jpg" width="485" height="484"></a>&nbsp;</p> <p><em>If it looks like a duck, quacks like a duck, but needs batteries – you probably have the wrong abstraction.</em></p> <h3>Interface Segregation Principle</h3> <p>Your interface should match only the needs of its users. If you pile on too many features to your interface, you make it hard to implement and difficult to use. The implementations are also likely violating the Single Responsibility Principle just to implement your interface.</p> <p><a href="http://brendan.enrick.com/image.axd?picture=NP-Interface-Segregation_1.jpg"><img title="NP-Interface-Segregation" style="border-top: 0px; border-right: 0px; border-bottom: 0px; border-left: 0px; display: inline" border="0" alt="NP-Interface-Segregation" src="http://brendan.enrick.com/image.axd?picture=NP-Interface-Segregation_thumb_1.jpg" width="486" height="484"></a> </p> <p><em>Tailor interfaces to individual client’s needs.</em></p> <h3>Dependency Inversion Principle</h3> <p>Don’t get too specific on your dependencies. Make sure that you’re depending on something stable. This is often some kind of an interface. In our example below, an outlet and a plug make the connection nicely. You don’t want to hard-code specifically to the connection you have; you might need to change your connection at some point.</p> <p><a href="http://brendan.enrick.com/image.axd?picture=NP-Dependency-Inversion.jpg"><img title="NP-Dependency-Inversion" style="border-top: 0px; border-right: 0px; border-bottom: 0px; border-left: 0px; display: inline" border="0" alt="NP-Dependency-Inversion" src="http://brendan.enrick.com/image.axd?picture=NP-Dependency-Inversion_thumb.jpg" width="484" height="484"></a> </p> <p></p> <p></p> <p></p> <p></p> <p></p> <p><em>Would you solder a lamp directly to the electrical wiring in a wall?</em></p> <p>I hope you enjoyed these SOLID principle pictures. And if you want to see more of this kind of humorous take on important software development principles and ideas, back our <a href="https://www.kickstarter.com/projects/988315286/software-craftsmanship-calendar-2016" target="_blank">Software Craftsmanship Calendar 2016 on Kickstarter</a>.</p>
