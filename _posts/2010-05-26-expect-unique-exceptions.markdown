---
layout: post
title: "Expect Unique Exceptions"
date: 2010-05-26 10:34:00 -0400
comments: true
published: true
categories: ["blog", "archives"]
tags: ["Blog"]
alias: ["/post/Expect-Unique-Exceptions", "/post/expect-unique-exceptions"]
---
<!-- more -->
{% include imported_disclaimer.html %}
<p>One too common programming practice that irks me when I find it in source code is throwing or catching non-specific exceptions. I believe firmly that it is important to fail fast, and exceptions are a great way to ensure fast-failing code. If you drag out a failure you can hide the initial issue or allow a process to continue after an error has happened. Using non-specific exceptions will also hide information. Failing quickly is important as is being able to respond correctly to an exception and track down the cause.</p>
<p>Steve Smith posted recently saying that one <a href="http://stevesmithblog.com/blog/don-rsquo-t-throw-duplicate-exceptions/" target="_blank">should not throw duplicate exceptions</a>. He gave a great example of where people will check for two different cases and throw duplicate exceptions.</p>
<div id="codeSnippetWrapper">
<pre id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> Foo(SomeClass someArgument)<br />{<br />  <span style="color: #0000ff">if</span>(someArgument == <span style="color: #0000ff">null</span>)<br />  {<br />    <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> InvalidArgumentException(<span style="color: #006080">"someArgument"</span>);<br />  }<br />  <span style="color: #0000ff">if</span>(!someArgument.IsValid())<br />  {<br />    <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> InvalidArgumentException(<span style="color: #006080">"someArgument"</span>);<br />  }<br /> <br />  <span style="color: #008000">// Do Real Work</span><br />}</pre>
<br /></div>
<p>Checking for null as well as custom validity is important, and you want them to be separate cases. The suggestion from Steve is that you give them unique messages or use a more specific exception to allow people to tell what caused the error.</p>
<div id="codeSnippetWrapper">
<pre id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> Foo(SomeClass someArgument)<br />{<br />  <span style="color: #0000ff">if</span>(someArgument == <span style="color: #0000ff">null</span>)<br />  {<br />    <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ArgumentNullException(<span style="color: #006080">"someArgument"</span>);<br />  }<br />  <span style="color: #0000ff">if</span>(!someArgument.IsValid())<br />  {<br />    <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> InvalidArgumentException(<span style="color: #006080">"someArgument"</span>);<br />  }<br /> <br />  <span style="color: #008000">// Do Real Work</span><br />}<br /><br /><span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> Bar(SomeClass someArgument)<br />{<br />  <span style="color: #0000ff">if</span>(someArgument.Quantity &lt; 0)<br />  {<br />    <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> InvalidArgumentException(<span style="color: #006080">"someArgument"</span>, <br />      <span style="color: #006080">"Quantity cannot be less than 0. Quantity: "</span> + someArgument.Quantity);<br />  }<br />  <span style="color: #0000ff">if</span>(someArgument.Quantity &gt; 100)<br />  {<br />    <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> InvalidArgumentException(<span style="color: #006080">"someArgument"</span>,<br />      <span style="color: #006080">"SomeArgument.Quantity cannot exceed 100.  Quantity: "</span> + someArgument.Quantity);<br />  }<br /> <br />  <span style="color: #008000">// Do Real Work</span><br />}</pre>
<br /></div>
<p>I lean toward using unique exceptions for handling this. It allows for better handling of the result and less duplication of the code. For example in the method listed above instead of using an InvalidArgumentException when the Quanitity is negative, I could use a NegativeSomeClassQuantityException. For the second one I might use an ExceededSomeClassQuanityException with the following resulting code.</p>
<div id="codeSnippetWrapper">
<pre id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> Bar(SomeClass someArgument)<br />{<br />  <span style="color: #0000ff">if</span>(someArgument.Quantity &lt; 0)<br />  {<br />    <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> NegativeSomeClassQuantityException(<span style="color: #006080">"someArgument"</span>, someArgument.Quantity);<br />  }<br />  <span style="color: #0000ff">if</span>(someArgument.Quantity &gt; 100)<br />  {<br />    <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> ExceededSomeClassQuantityException(<span style="color: #006080">"someArgument"</span>, someArgument.Quantity);<br />  }<br /> <br />  <span style="color: #008000">// Do Real Work</span><br />}</pre>
<br /></div>
<p>This is great because my code isn&rsquo;t concerned with how to format these exceptions. My code just passes the required information via constructor parameters and the exception knows how it should be formatted. The calling code can catch each of these exceptions if it has a special way of handling either one or through the use of polymorphism it can handle both of them.</p>
<p>We want to make sure that we inherit from a relevant exception as well, so we could use the InvalidArgumentException.</p>
<div id="codeSnippetWrapper">
<pre id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> NegativeSomeClassQuantityException : InvalidArgumentException<br />{<br />    <span style="color: #0000ff">public</span> NegativeSomeClassQuanitytException(<span style="color: #0000ff">string</span> argumentName, <span style="color: #0000ff">int</span> quantity) : <br />        <span style="color: #0000ff">base</span>(argumentName, <span style="color: #006080">"Quantity cannot be less than 0. Quantity: "</span> + someArgument.Quantity)<br />}<br /><br /><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> ExceededSomeClassQuantityException : InvalidArgumentException<br />{<br />    <span style="color: #0000ff">public</span> ExceededSomeClassQuantityException(<span style="color: #0000ff">string</span> argumentName, <span style="color: #0000ff">int</span> quantity) : <br />        <span style="color: #0000ff">base</span>(argumentName, <span style="color: #006080">"SomeArgument.Quantity cannot exceed 100.  Quantity: "</span> + someArgument.Quantity)<br />}</pre>
<br /></div>
