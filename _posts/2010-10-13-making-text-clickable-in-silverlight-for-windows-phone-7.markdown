---
layout: post
title: "Making Text Clickable in Silverlight for Windows Phone 7"
date: 2010-10-13 09:09:00 -0400
comments: true
published: true
categories: ["blog", "archives"]
tags: ["Blog"]
permalink: "/post/Making-Text-Clickable-in-Silverlight-for-Windows-Phone-7"
---
<!-- more -->

<p>I’ve seen a lot of snippets of code online where people are trying to make text clickable in Windows Phone 7, and plenty of them are using the OnMouseLeftButtonDown event to do it. Well to put this lightly, this is not the best way of handling a click in the Windows Phone 7 environment. The reason is that we have to put the “left button” down in order to scroll. The “left button” is our finger, so if we try to scroll down and press our finger on the text we will be activating the event by mistake.</p>  <p>In order to resolve this we need to have the click event. Well, the click event is on the Button not on the TextBlock. In this example I will be using the MVVM Light toolkit and showing how I can wire up a Click event to a command on my ViewModel. </p>  <p>This example is a DataTemplate being used to display a list of colors each one as a bound item in a ListBox. I will be setting the text of each item to be the name of the color and I will be handling the click event by binding it to a command on my ViewModel the command will take in the color’s ID as a parameter. Notice that since I am in a DataTemplate I have to access the ViewModel for this view by accessing my view. While in the DataTemplate my current DataContext is the Color item I am binding in the list. Read more about <a href="http://brendan.enrick.com/post/Accessing-the-ViewModel-Inside-a-DataTemplate-in-Silverlight.aspx" target="_blank">accessing the ViewModel from a DataTemplate</a>.</p>  <div id="codeSnippetWrapper">   <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #0000ff">&lt;</span><span style="color: #800000">DataTemplate</span> <span style="color: #ff0000">x:Key</span><span style="color: #0000ff">="colorListTemplate"</span><span style="color: #0000ff">&gt;</span><br>  <span style="color: #0000ff">&lt;</span><span style="color: #800000">Grid</span><span style="color: #0000ff">&gt;</span><br>    <span style="color: #0000ff">&lt;</span><span style="color: #800000">Button</span><span style="color: #0000ff">&gt;</span><br>      <span style="color: #0000ff">&lt;</span><span style="color: #800000">Button.Template</span><span style="color: #0000ff">&gt;</span><br>        <span style="color: #0000ff">&lt;</span><span style="color: #800000">ControlTemplate</span><span style="color: #0000ff">&gt;</span><br>          <span style="color: #0000ff">&lt;</span><span style="color: #800000">TextBlock</span> <span style="color: #ff0000">Text</span><span style="color: #0000ff">="{Binding Name}"</span> <span style="color: #ff0000">FontSize</span><span style="color: #0000ff">="64"</span> <span style="color: #0000ff">/&gt;</span><br>        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">ControlTemplate</span><span style="color: #0000ff">&gt;</span><br>      <span style="color: #0000ff">&lt;/</span><span style="color: #800000">Button.Template</span><span style="color: #0000ff">&gt;</span><br>      <span style="color: #0000ff">&lt;</span><span style="color: #800000">i:Interaction.Triggers</span><span style="color: #0000ff">&gt;</span><br>        <span style="color: #0000ff">&lt;</span><span style="color: #800000">i:EventTrigger</span> <span style="color: #ff0000">EventName</span><span style="color: #0000ff">="Click"</span><span style="color: #0000ff">&gt;</span><br>          <span style="color: #0000ff">&lt;</span><span style="color: #800000">cmd:EventToCommand</span> <br>          <span style="color: #ff0000">Command</span><span style="color: #0000ff">="{Binding DataContext.PickColor, ElementName=TheView}"</span> <br>          <span style="color: #ff0000">CommandParameter</span><span style="color: #0000ff">="{Binding Path=ID}"</span><span style="color: #0000ff">/&gt;</span><br>        <span style="color: #0000ff">&lt;/</span><span style="color: #800000">i:EventTrigger</span><span style="color: #0000ff">&gt;</span><br>      <span style="color: #0000ff">&lt;</span><span style="color: #800000">i:Interaction.Triggers</span><span style="color: #0000ff">&gt;</span><br>    <span style="color: #0000ff">&lt;/</span><span style="color: #800000">Button</span><span style="color: #0000ff">&gt;</span><br>  <span style="color: #0000ff">&lt;/</span><span style="color: #800000">Grid</span><span style="color: #0000ff">&gt;</span><br><span style="color: #0000ff">&lt;/</span><span style="color: #800000">DataTemplate</span><span style="color: #0000ff">&gt;</span></pre>

  <br></div>

<div id="codeSnippetWrapper">Notice that I set the ContentTemplate of the Button. This means that I am telling the control to not display how it would normally display and instead to display how I want it to. I do this so that I can display text as normal so that it looks like a have a regular list of items, and I am able to make this text handle the event when someone clicks on it. Keep in mind that a click and a scroll are two different operations in the Windows Phone, so non one is going to accidentally click on my item when they are trying to scroll. If I had done this with a MouseLeftButtonDown event as I’ve seen shown in the past it will cause the command to happen when someone is trying to scroll the list on the phone. </div>

<div>&nbsp;</div>

<div>Remember that a button can look like anything in Silverlight. You have a ContentTemplate you can define for the button, so you have the power to always have a Click event. So if you need to make something clickable, make a button and put your control as the template for the button.</div>
