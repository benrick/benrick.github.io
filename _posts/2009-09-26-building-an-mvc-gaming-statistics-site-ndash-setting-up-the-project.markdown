---
layout: post
title: "Building an MVC Gaming Statistics Site &ndash; Setting Up the Project"
date: 2009-09-26 17:36:00 -0400
comments: true
published: true
categories: ["Archive"]
tags: ["Blog"]
permalink: "/post/Building-an-MVC-Gaming-Statistics-Site-ndash-Setting-Up-the-Project/"
---
<!-- more -->



<p>Now that ASP.NET MVC has been around for a while there have been plenty of articles written about how leverage the technology to create powerful, lightweight web applications which are highly customizable and testable. I&rsquo;ve discussed the advantages of using ASP.NET Forms and ASP.NET MVC plenty of times in the past, but just so no one thinks I am a forms hater I will say that I still create forms applications. Both MVC and Forms can coexist and they both have their advantages.</p>
<p>I will say that there is of course a learning curve for MVC. You don&rsquo;t instantly know it just because you&rsquo;ve used web forms. So yes, it will be like learning any new technology. However, I am writing this so that a transition can be easier. Rather than doing some demo application that doesn&rsquo;t take into consideration real-life situations and circumstances I&rsquo;ll be posting about an application I&rsquo;ve been working on.</p>
<h3>Background Information and Reason for Creating the Site</h3>
<p>I am a member of the Boardgamers Of Greater Akron (BOGA), which if you hadn&rsquo;t guessed from the name is a group of people who gather together the second Friday of every month to play board games. As games are completed the stats from the games are recorded onto sheets of paper and these stats will later be entered into a database.</p>
<p>Initially the founder of the group had been entering these game logs into the system using a local web forms application using the standard data entry controls. The entire site took about half an hour to an hour to create, so as you can guess it was kind of clunky and hard to use. From the data, I was able to write a bunch of SQL queries that were then used to calculate the stats from these games.</p>
<h3>Creating the Solution, MVC Project, and Web Tests Project</h3>
<p>I like to start by creating a solution first. I don&rsquo;t want Visual Studio to create the solution for me because it will do a lot of stuff for me. I want to have control of the structure of my application, so I am going to create that first. This will let me <a href="/post/organizing-software-projects/" target="_blank">organize my software project</a>. To create a solution just create a new project of type Blank Solution. You can find that in the Other Project Types &ndash;&gt; Visual Studio Solutions category.</p>
<p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="01-NewSolution" src="http://brendan.enrick.com/files/media/image/WindowsLiveWriter/BuildinganMVCGamingStatisticsSiteSetting_9ABB/01-NewSolution_3.png" border="0" alt="01-NewSolution" width="500" height="356" />&nbsp;</p>
<p>I named the solution based on the domain of the application. This is important to do since I don&rsquo;t plan on referencing the domain in any of the projects in this solution. Since names get long and difficult to work with sometimes I am going to stick with shorter ones. I&rsquo;ll alter their default namespaces so it is a little bit easier to deal with.</p>
<p>Before we can write any code we have to have a project in which to write this code, so how about if we create a new MVC project. I&rsquo;ll name it based on the domain of our application, so I&rsquo;ll go with <em>Web</em>. Since the</p>
<p>&nbsp;<img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="02-NewMVCProject" src="http://brendan.enrick.com/files/media/image/WindowsLiveWriter/BuildinganMVCGamingStatisticsSiteSetting_9ABB/02-NewMVCProject_3.png" border="0" alt="02-NewMVCProject" width="500" height="319" /></p>
<p>Since we created this as an MVC site we will be prompted with the option to create a test project. Your Test Framework options will be populated with the test frameworks that you have installed that Visual Studio knows about. In this case I am just going to go with the Visual Studio Unit Test Framework since it defaulted to that. The differences between this and NUnit are negligible anyway.</p>
<p>&nbsp;<img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="03-CreateWebTestProject" src="http://brendan.enrick.com/files/media/image/WindowsLiveWriter/BuildinganMVCGamingStatisticsSiteSetting_9ABB/03-CreateWebTestProject_3.png" border="0" alt="03-CreateWebTestProject" width="500" height="336" /></p>
<p>After you wait for Visual Studio to create the projects for you the following will appear in the Solution Explorer. The first step is deleting the AuthoringTests.txt file. Not sure why that needed to be included <em>every single time a project is created</em>. Maybe there is some way to turn it off just so I don&rsquo;t have to delete it. Well it doesn&rsquo;t matter anyway.</p>
<p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="04-SlnExpl-DeleteAuthoringTests" src="http://brendan.enrick.com/files/media/image/WindowsLiveWriter/BuildinganMVCGamingStatisticsSiteSetting_9ABB/04-SlnExpl-DeleteAuthoringTests_3.png" border="0" alt="04-SlnExpl-DeleteAuthoringTests" width="327" height="455" /></p>
<p>I might also delete the App.config file, but there really isn&rsquo;t much there to worry about. The use of the App.config in testing should be discouraged. If you&rsquo;re having to put something in there then you have too much dependency on that. Keep in mind that the App.config in a test project should only include <em>test configuration</em> information. If it is using anything that is normally in the <em>production configuration</em> then you&rsquo;ve got something you need to fix.</p>
<h3>Creating the Core and Infrastructure Projects</h3>
<p>Our next step is to create a project where we will keep the <em>core logic</em> of our application. This is business layer, but I don&rsquo;t like that name because <em>business logic</em> often ends up getting mingled with <em>infrastructure concerns</em>. I am naming the next project <em>Core</em> to mean that this is central to the application. Only the things that are core parts of the application go here.</p>
<p>&nbsp;<img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="05-NewProject-Core" src="http://brendan.enrick.com/files/media/image/WindowsLiveWriter/BuildinganMVCGamingStatisticsSiteSetting_9ABB/05-NewProject-Core_3.png" border="0" alt="05-NewProject-Core" width="500" height="319" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>So as usual I need to make a couple of modifications. First I delete the silly Class1.cs file and then move the <em>Models</em> from the web project and move it here. I would say that the domain objects that we are going to be dealing with deserve to be in our core application.</p>
<p>&nbsp;<img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="06-SlnExpl-MoveModels" src="http://brendan.enrick.com/files/media/image/WindowsLiveWriter/BuildinganMVCGamingStatisticsSiteSetting_9ABB/06-SlnExpl-MoveModels_3.png" border="0" alt="06-SlnExpl-MoveModels" width="322" height="464" /></p>
<p>&nbsp;</p>
<p>The Infrastructure is the next step. If you expect to have multiple infrastructure concerns that you want to separate into separate libraries go with a more specific name for this project. Since I expect to only deal with database concerns I will stick with a generic name&gt; If I ever need to change things I am not too concerned since renaming things is actually really easy if I structure my application nicely and use refactoring tools to help.</p>
<p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="07-NewProjectInfrastructure" src="http://brendan.enrick.com/files/media/image/WindowsLiveWriter/BuildinganMVCGamingStatisticsSiteSetting_9ABB/07-NewProjectInfrastructure_3.png" border="0" alt="07-NewProjectInfrastructure" width="500" height="320" /></p>
<p>Once I create this I will of course delete the Class1.cs file and I will end up with a pretty full Solution Explorer now. I&rsquo;ve got most of the projects in place now. I could have started small here, but I know I am going to need these projects.</p>
<p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="08-SlnExpl-CreatedInfrastructure" src="http://brendan.enrick.com/files/media/image/WindowsLiveWriter/BuildinganMVCGamingStatisticsSiteSetting_9ABB/08-SlnExpl-CreatedInfrastructure_3.png" border="0" alt="08-SlnExpl-CreatedInfrastructure" width="322" height="498" /></p>
<h3>Creating the Unit and Integration Test Projects</h3>
<p>Since I like to keep the unit and integration tests separated from the production code it is nice to keep them in a separate library. This means that the tests need not be included with the rest of the application in deployed scenarios. The only problem I can think of is keeping the tests in their own library could make them just another navigation headache. However, since I use ReSharper I have a navigation tool which allows me to quickly get to anything based on its name, so I am not concerned with that issue.</p>
<p>Since I am using MSTest for my testing framework I can use the Visual Studio Test template. If you&rsquo;re using something else like NUnit you will just create a normal class library and include a reference to the NUnit dll.</p>
<p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="09-NewProject-UnitTests" src="http://brendan.enrick.com/files/media/image/WindowsLiveWriter/BuildinganMVCGamingStatisticsSiteSetting_9ABB/09-NewProject-UnitTests_3.png" border="0" alt="09-NewProject-UnitTests" width="500" height="319" /></p>
<p>Since we created this from the UnitTest project template it added in the reference to the dll required to use MSTest. However, we will also need to eliminate these files which were created for us.</p>
<p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="10-SlnExpl-DeleteTestProjFiles" src="http://brendan.enrick.com/files/media/image/WindowsLiveWriter/BuildinganMVCGamingStatisticsSiteSetting_9ABB/10-SlnExpl-DeleteTestProjFiles_3.png" border="0" alt="10-SlnExpl-DeleteTestProjFiles" width="324" height="297" /></p>
<p>The next step is an integration test library. These tests are very important in the project as they help us ensure that everything is working well <em>together.</em> We want all the individual pieces working, but knowing that they interact is just as important. We keep them separate because the integration tests can often be long-running and we want to be able to execute the unit tests first. They will run faster and if there are any issues we will know sooner. Creating the integration test project will be done the same way we created the unit test one.</p>
<p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="11-NewProject-IntegrationTests" src="http://brendan.enrick.com/files/media/image/WindowsLiveWriter/BuildinganMVCGamingStatisticsSiteSetting_9ABB/11-NewProject-IntegrationTests_3.png" border="0" alt="11-NewProject-IntegrationTests" width="500" height="320" /></p>
<p>And as usual we have a few files that we do not need. Time to delete them.</p>
<p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="12-SlnExpl-DeleteIntegrationTestProjFiles" src="http://brendan.enrick.com/files/media/image/WindowsLiveWriter/BuildinganMVCGamingStatisticsSiteSetting_9ABB/12-SlnExpl-DeleteIntegrationTestProjFiles_3.png" border="0" alt="12-SlnExpl-DeleteIntegrationTestProjFiles" width="324" height="304" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>I will soon discuss setting up the build process using NAnt and the continuous integration process using CruiseControl.net. As you may have noticed I think the structure of software projects and the initial setup are very important. Without build systems in place I think the development process can be very limiting.</p>
<p>&nbsp;</p>
