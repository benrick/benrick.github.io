---
layout: post
title: "Unit Testing With a Base Test Class"
date: 2010-10-12 11:51:00 -0400
comments: true
published: true
categories: ["blog", "archives"]
tags: ["Blog"]
permalink: "/post/Unit-Testing-With-a-Base-Test-Class/"
---
<!-- more -->



<p>Writing good code that can be trusted to work means unit testing your code. In order to effectively maintain these tests you will need to <a href="/post/Treat-Your-Tests-Well.aspx" target="_blank">follow the same principles you would with any other code</a>. This of course means that you extract logic to achieve code reuse, name methods and objects clearly, use composition, and use inheritance.</p>  <p>In this post I am going to show how you can get some code reuse when you’re following another good testing practice. You should keep things well abstracted. I like to keep my tests in folders and I keep test classes in those folders. I do this so that I can have each test class be small and only be testing one things. By doing this I make my test classes a lot cleaner and easier to work with. This means, however, that if I do not extract some of the duplication I could be creating more maintenance work later.</p>  <p>On way that I keep my tests more maintainable is to keep duplicated logic for initialization in base classes. When I am testing methods of a certain class, I will keep a folder of those tests and have a class for each area of the code I want to test. This lets me keep some of the initialization logic in a base class. Many of the test classes will need an instance of the object being tested, so I can put logic in the base class to initialize my mock objects pass them to the constructor of the class I will be testing.</p>  <p>Setting up a base class is easy. The following examples show how to set up a base test class in MSTest and NUnit.</p>  <h3>Setting Up a Base Test Class with MSTest</h3>  <div id="codeSnippetWrapper">   <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet">[TestClass]<br><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> BaseTestClass<br>{<br>    <span style="color: #0000ff">public</span> BaseTestClass()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"BaseTestClass.Ctor()"</span>);<br>    }<br><br>    [TestInitialize]<br>    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> BaseTestInitialize()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"BaseTestClass.BaseTestInitialize()"</span>);<br>    }<br><br>    [TestCleanup]<br>    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> BaseTestCleanup()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"BaseTestClass.BaseTestCleanup()"</span>);<br>    }<br>}<br><br>[TestClass]<br><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> ConcreteTestClass :BaseTestClass<br>{<br>    <span style="color: #0000ff">public</span> ConcreteTestClass()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"ConcreteTestClass.Ctor()"</span>);<br>    }<br><br>    [TestInitialize]<br>    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> MyTestInitialize()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"ConcreteTestClass.MyTestInitialize()"</span>);<br>    }<br><br>    [TestCleanup]<br>    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> MyTestCleanup()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"ConcreteTestClass.MyTestCleanup()"</span>);<br>    }<br><br><br>    [TestMethod]<br>    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> TestMethod1()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"ConcreteTestClass.TestMethod1()"</span>);<br>    }<br><br>    [TestMethod]<br>    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> TestMethod2()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"ConcreteTestClass.TestMethod2()"</span>);<br>    }<br>}<br></pre>

  <br></div>

<p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="MSTestBaseClassTestOutput" border="0" alt="MSTestBaseClassTestOutput" src="/images/files/MSTestBaseClassTestOutput.png" width="326" height="171"> </p>

<p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="BaseTestSessionOutput" border="0" alt="BaseTestSessionOutput" src="/images/files/BaseTestSessionOutput_2.png" width="554" height="493"> </p>

<h3>Setting Up a Base Test Class using NUnit</h3>

<div id="codeSnippetWrapper">
  <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px" id="codeSnippet">[TestFixture]<br><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> BaseTestClass<br>{<br>    <span style="color: #0000ff">public</span> BaseTestClass()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"BaseTestClass.Ctor()"</span>);<br>    }<br><br>    [SetUp]<br>    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> BaseSetUp()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"BaseTestClass.SetUp()"</span>);<br>    }<br><br>    [TearDown]<br>    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> BaseTearDown()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"BaseTestClass.TearDown()"</span>);<br>    }<br>}<br><br>[TestFixture]<br><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> ConcreteTestClass : BaseTestClass<br>{<br>    <span style="color: #0000ff">public</span> ConcreteTestClass()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"ConcreteTestClass.Ctor()"</span>);<br>    }<br><br>    [SetUp]<br>    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> SetUp()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"ConcreteTestClass.SetUp()"</span>);<br>    }<br><br>    [TearDown]<br>    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> TearDown()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"ConcreteTestClass.TearDown()"</span>);<br>    }<br><br><br>    [Test]<br>    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> TestMethod1()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"ConcreteTestClass.TestMethod1()"</span>);<br>    }<br><br>    [Test]<br>    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> TestMethod2()<br>    {<br>        Console.WriteLine(<span style="color: #006080">"ConcreteTestClass.TestMethod2()"</span>);<br>    }<br>}<br></pre>

  <br></div>

<p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="NUnitBaseClassTestOutput" border="0" alt="NUnitBaseClassTestOutput" src="/images/files/NUnitBaseClassTestOutput.png" width="309" height="140"> </p>

<p><img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="BaseTestSessionOutput" border="0" alt="BaseTestSessionOutput" src="/images/files/BaseTestSessionOutput_3.png" width="554" height="493"> </p>

<p>Notice in these examples how the Base method setups happen first and then the local class ones. This allows you to depend on the code happening on the base class first. Then when you tear everything down you will first clear up things in the local method and then the base class will run.</p>

<p>Make sure you follow this example by having different names for the base methods so they don’t collide with the local names. This lets you have them both run without one having to call the other. If the names match you will either be overriding the base or hiding it, but they will not both run.</p>
