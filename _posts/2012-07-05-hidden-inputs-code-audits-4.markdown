---
layout: post
title: "Hidden Inputs - Code Audits #4"
date: 2012-07-05 10:00:00 -0400
comments: true
published: true
categories: ["blog", "archives"]
tags: ["Blog"]
permalink: "/post/Hidden-Inputs-Code-Audits-4/"
---
<!-- more -->

<p><a href="/images/files/ManBehindCurtain.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: right; border-top: 0px; border-right: 0px; padding-top: 0px" title="ManBehindCurtain" border="0" alt="ManBehindCurtain" align="right" src="/images/files/ManBehindCurtain_thumb.jpg" width="240" height="240" /></a>No user could ever find your “hidden” inputs. You’re a master of stealth and the HTML hidden fields are totally safe and secure for whatever you want to put there. That’s why they’re called “hidden”. Obviously.</p>  <h3>Hidden Inputs</h3>  <p>In simple terms, these are HTML controls that sit on a page and have no display for users. They’re only “hidden” by not being in plain sight. It’s like hiding something behind a curtain. It makes it easily ignored, but anyone can decide they want to pay attention to that man behind the curtain.</p>  <p>When a user submits a form to your server, it will also post the values of the hidden fields. These are occasionally useful for developers, but are not a place for secure information. You might have an unimportant value you want to maintain. </p>  <p>Never put any information in a hidden input that shouldn’t be seen or modified by a user. </p>  <h3>The Bad</h3>  <p>One project that I had the pleasure of looking over for someone was a homebrew ecommerce application… Yes, this one is going to get scary.</p>  <p>When you buy something from a site, it will often show you some prices and a total for your order before you checkout. This application had a rather genius location to store the total price that you would be paying. It kept the total in a HiddenInput, so that when the user confirmed the order it would send that up to the server for processing. </p>  <p>I think this was a form of making sure that the same value shown to the user was what they paid. I can only assume that the developer was trying to avoid the values changing in the system and the customer paying a price different from what was shown on the preview.</p>  <p>The danger, however, is that if you want to pay $0.01 for anything on the site, you can just change the hidden input value to 0.01 and then submit the page. Sure it takes someone with some web knowledge to do that, but anymore that’s not a rare thing to know about.</p>  <p>The really cool part is that the system used that value to send to the credit card processor and actually recorded the full detailed list when it logged it. That means that the site logged everything correctly and when it processed the order with the card company it used the amount you specified in the hidden input. Yes, you could totally have ripped them off and their own sites records wouldn’t even show it!</p>  <p>If you’re thinking about trying this on that site, I am sorry to burst your bubble. I told them about that issue and they fixed it.</p>  <p>Less cool than the above example, I’ve seen AccountIds stored in hidden inputs as well as other values that shouldn’t be kept in those locations. I’ve yet to see passwords stored there, but I am sure it’s been done somewhere by someone.</p>  <h3>The Better</h3>  <p>Make sure to keep all information that requires any level of security or control on the server. Never ever put something like that on the page. Information that should be shown to a user in a read-only fashion should be treated as such. When sent to the client, it should be displayed only. Those values should be left with the client and only information from the server should be trusted.</p>  <p>If you need to store that information somewhere, put it in server memory in some kind of state or store it in the server’s permanent storage.</p>  <p>User sessions are great for storing user-specific information. In the case of the shopping cart, you could use some of that in-memory storage like session or you could store a temporary record in the database of that cart. I am not going to get in the specifics here, but make sure that you get it stored somewhere that users don’t have access to it.</p>  <h3>More Code Audit Nuggets</h3>  <p>Keep watching for more interesting nuggets of stuff that I’ve seen in codebases.</p>
