---
layout: post
title: "Massive Classes - Code Audits #3"
date: 2012-07-04 10:00:00 -0400
comments: true
published: true
categories: ["Archive"]
tags: ["DaysOfCodeAudits", "Code Audits", "Single Responsibility Principle"]
permalink: "/post/Massive-Classes-Code-Audits-3/"
---
<!-- more -->



<p>Today we’re going to take a look at something that I’m sure most of you have seen before. </p>  <p>We’re talking about classes that have grown so large that they’ve earned the size category “massive”. These classes can sometimes house an entire layer of an application. Who would create these monstrosities? Usually it’s a team of malicious, evil developers who are trying to ruin your day. The devised a clever way to make your development experience terrible; they create a massive class and make sure that you end up having to maintain/repair/modify the code.</p>  <p>The real question everyone should be asking is “how big?”</p>  <h3>The Bad</h3>  <p>I could write all day long about different instances of these that I’ve seen, but instead of boring you, I will only talk about one of the worst offenders I’ve ever seen.</p>  <p>One fantastic code base we inherited was built using a “great” technique for organizing the code. It’s simple approach state that any time you needed to do any data access you could just go to the class named, “MasterDAL”. What made this so great? Well, you always knew where the method you needed would be. What is wrong with that? Well, it was quite common to have 2 or 3 methods that did the same thing in that massive class.</p>  <p>Sometimes you had a few methods that all did the same thing, but each one did it slightly different. The really fun part is that some of them worked and some of them didn’t. It was your job to make sure that you used one that had been updated and had its bugs fixed.</p>  <p>How big was MasterDAL you ask? That file alone was over 50,000 lines long. It was not auto-generated. It was written by developers.</p>  <p>OK, so something I told you so far about this wasn’t true. The code wasn’t really this nice. It gets better. I lied about there being 1 place for everything. MasterDAL was the master data access layer. There were two other data access layers. </p>  <p>Luckily those ones had much more specific names and were not as general or as large as the MasterDal. MiscellaneousDAL and OtherDAL were each only about 20,000 lines long. Obviously the miscellaneous data access and all the other data access go in those. That’s how they’re different from “Master”.</p>  <p>Oh and did I mention that not only did it have repeated code internally, but it also had some methods repeated in the MasterDAL. I know you’re surprised now.</p>  <h3>The Better</h3>  <p>Please always make sure that you’re organizing in smaller classes. Go read about the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank">Single Responsibility Principle</a>. It will explain that we need to organize our code. We also need to not repeat ourselves quite so much.</p>  <p>There are so many great ways of dealing with data access. Go get yourself an ORM or just use Entity Framework. I don’t care how you do it, but use one of those. Go read about some designs for organizing your data access code. There are so many good options out there. There’s no reason to create these big messes. </p>  <h3>More Code Audit Nuggets</h3>  <p>Keep watching for more interesting nuggets of stuff that I’ve seen in codebases.</p>
