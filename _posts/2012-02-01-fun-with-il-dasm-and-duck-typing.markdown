---
layout: post
title: "Fun with IL DASM and Duck Typing"
date: 2012-02-01 10:00:00 -0500
comments: true
published: true
categories: ["blog", "archives"]
tags: ["C#", "Duck Typing", "ILDASM", "IL", "Fun"]
permalink: "/post/Fun-with-IL-DASM-and-Duck-Typing/"
---
<!-- more -->



  <div id="codeSnippetWrapper">   <div id="codeSnippetWrapper">So as a bit of fun, since I just wrote a post about <a href="/post/Foreach-IEnumerable-IEnumerator-and-Duck-Typing.aspx" target="_blank">duck typing and foreach loops</a>, I thought I would take a look at what’s happening under the hood when we use this trick. To start with, I will have two classes, which each have GetEnumerator methods. The first one is using DuckTyping, so it doesn’t implement any interfaces. The second one is implementing the IEnumerable interface. Finally, I have a third class with a method that just uses a foreach loop over instances of the other two classes.</div> </div>    <p>The code for my little example looks like this:</p>  <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; max-width:660px; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> DuckCollection<br>{<br>    <span style="color: #0000ff">public</span> IEnumerator GetEnumerator()<br>    {<br>        <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> NotImplementedException();<br>    }<br>}<br><br><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> EnumerableCollection : IEnumerable<br>{<br>    <span style="color: #0000ff">public</span> IEnumerator GetEnumerator()<br>    {<br>        <span style="color: #0000ff">throw</span> <span style="color: #0000ff">new</span> NotImplementedException();<br>    }<br>}<br><br><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> ForEacher<br>{<br>    <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> DoForEach()<br>    {<br>        var duckCollection = <span style="color: #0000ff">new</span> DuckCollection();<br>        <span style="color: #0000ff">foreach</span> (var thing1 <span style="color: #0000ff">in</span> duckCollection)<br>        {<br>            <br>        }<br><br>        var enumerableCollection = <span style="color: #0000ff">new</span> EnumerableCollection();<br>        <span style="color: #0000ff">foreach</span> (var thing2 <span style="color: #0000ff">in</span> enumerableCollection)<br>        {<br>            <br>        }<br>    }<br>}<br></pre>

<div id="codeSnippetWrapper">
  <div>
    <br>After I compile this code, I’ve opened it up with IL DASM, so I can see what the generated IL is for this code.</div>
</div>

<div id="codeSnippetWrapper">
  <div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper">
    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; max-width:660px; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet">.method <span style="color: #0000ff">public</span> hidebysig instance <span style="color: #0000ff">void</span>  DoForEach() cil managed<br>{<br>  <span style="color: #008000">// Code size       146 (0x92)</span><br>  .maxstack  2<br>  .locals init ([0] <span style="color: #0000ff">class</span> DuckTypingILCode.DuckCollection duckCollection,<br>           [1] <span style="color: #0000ff">object</span> thing1,<br>           [2] <span style="color: #0000ff">class</span> DuckTypingILCode.EnumerableCollection enumerableCollection,<br>           [3] <span style="color: #0000ff">object</span> thing2,<br>           [4] <span style="color: #0000ff">class</span> [mscorlib]System.Collections.IEnumerator CS$5$0000,<br>           [5] <span style="color: #0000ff">bool</span> CS$4$0001,<br>           [6] <span style="color: #0000ff">class</span> [mscorlib]System.IDisposable CS$0$0002)<br>  IL_0000:  nop<br>  IL_0001:  newobj     instance <span style="color: #0000ff">void</span> DuckTypingILCode.DuckCollection::.ctor()<br>  IL_0006:  stloc.0<br>  IL_0007:  nop<br>  IL_0008:  ldloc.0<br>  IL_0009:  callvirt   instance <span style="color: #0000ff">class</span> [mscorlib]System.Collections.IEnumerator DuckTypingILCode.DuckCollection::GetEnumerator()<br>  IL_000e:  stloc.s    CS$5$0000<br>  .<span style="color: #0000ff">try</span><br>  {<br>    IL_0010:  br.s       IL_001c<br>    IL_0012:  ldloc.s    CS$5$0000<br>    IL_0014:  callvirt   instance <span style="color: #0000ff">object</span> [mscorlib]System.Collections.IEnumerator::get_Current()<br>    IL_0019:  stloc.1<br>    IL_001a:  nop<br>    IL_001b:  nop<br>    IL_001c:  ldloc.s    CS$5$0000<br>    IL_001e:  callvirt   instance <span style="color: #0000ff">bool</span> [mscorlib]System.Collections.IEnumerator::MoveNext()<br>    IL_0023:  stloc.s    CS$4$0001<br>    IL_0025:  ldloc.s    CS$4$0001<br>    IL_0027:  brtrue.s   IL_0012<br>    IL_0029:  leave.s    IL_0048<br>  }  <span style="color: #008000">// end .try</span><br>  <span style="color: #0000ff">finally</span><br>  {<br>    IL_002b:  ldloc.s    CS$5$0000<br>    IL_002d:  isinst     [mscorlib]System.IDisposable<br>    IL_0032:  stloc.s    CS$0$0002<br>    IL_0034:  ldloc.s    CS$0$0002<br>    IL_0036:  ldnull<br>    IL_0037:  ceq<br>    IL_0039:  stloc.s    CS$4$0001<br>    IL_003b:  ldloc.s    CS$4$0001<br>    IL_003d:  brtrue.s   IL_0047<br>    IL_003f:  ldloc.s    CS$0$0002<br>    IL_0041:  callvirt   instance <span style="color: #0000ff">void</span> [mscorlib]System.IDisposable::Dispose()<br>    IL_0046:  nop<br>    IL_0047:  endfinally<br>  }  <span style="color: #008000">// end handler</span><br>  IL_0048:  nop<br>  IL_0049:  newobj     instance <span style="color: #0000ff">void</span> DuckTypingILCode.EnumerableCollection::.ctor()<br>  IL_004e:  stloc.2<br>  IL_004f:  nop<br>  IL_0050:  ldloc.2<br>  IL_0051:  callvirt   instance <span style="color: #0000ff">class</span> [mscorlib]System.Collections.IEnumerator DuckTypingILCode.EnumerableCollection::GetEnumerator()<br>  IL_0056:  stloc.s    CS$5$0000<br>  .<span style="color: #0000ff">try</span><br>  {<br>    IL_0058:  br.s       IL_0064<br>    IL_005a:  ldloc.s    CS$5$0000<br>    IL_005c:  callvirt   instance <span style="color: #0000ff">object</span> [mscorlib]System.Collections.IEnumerator::get_Current()<br>    IL_0061:  stloc.3<br>    IL_0062:  nop<br>    IL_0063:  nop<br>    IL_0064:  ldloc.s    CS$5$0000<br>    IL_0066:  callvirt   instance <span style="color: #0000ff">bool</span> [mscorlib]System.Collections.IEnumerator::MoveNext()<br>    IL_006b:  stloc.s    CS$4$0001<br>    IL_006d:  ldloc.s    CS$4$0001<br>    IL_006f:  brtrue.s   IL_005a<br>    IL_0071:  leave.s    IL_0090<br>  }  <span style="color: #008000">// end .try</span><br>  <span style="color: #0000ff">finally</span><br>  {<br>    IL_0073:  ldloc.s    CS$5$0000<br>    IL_0075:  isinst     [mscorlib]System.IDisposable<br>    IL_007a:  stloc.s    CS$0$0002<br>    IL_007c:  ldloc.s    CS$0$0002<br>    IL_007e:  ldnull<br>    IL_007f:  ceq<br>    IL_0081:  stloc.s    CS$4$0001<br>    IL_0083:  ldloc.s    CS$4$0001<br>    IL_0085:  brtrue.s   IL_008f<br>    IL_0087:  ldloc.s    CS$0$0002<br>    IL_0089:  callvirt   instance <span style="color: #0000ff">void</span> [mscorlib]System.IDisposable::Dispose()<br>    IL_008e:  nop<br>    IL_008f:  endfinally<br>  }  <span style="color: #008000">// end handler</span><br>  IL_0090:  nop<br>  IL_0091:  ret<br>} <span style="color: #008000">// end of method ForEacher::DoForEach</span><br><br></pre>

    <br></div>

  <div>&nbsp;</div>
</div>

<p>Yes, it’s a bit ugly, but you will notice that other than naming, the code is just repeated twice. This is of course what we would expect, since the code should treat it the same regardless. All the foreach loop needed was to be able to get the object from the GetEnumerator method. Once it has that, it just uses the enumerator to do all of the work. This means that either class should work just as well.</p>

<p>This is the repeated line of code that shows up in two places to get the enumerator it will be using for its MoveNext() and GetCurrent() methods.</p>

<div id="codeSnippetWrapper">
  <div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper">
    <pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; max-width:660px; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet">IL_0009:  callvirt   instance <span style="color: #0000ff">class</span> [mscorlib]System.Collections.IEnumerator DuckTypingILCode.DuckCollection::GetEnumerator()<br>IL_0051:  callvirt   instance <span style="color: #0000ff">class</span> [mscorlib]System.Collections.IEnumerator DuckTypingILCode.EnumerableCollection::GetEnumerator()</pre>

    <br></div>

  <div>&nbsp;</div>
</div>

<p>Now if you’re really paying attention, you will have looked at the Try-Finally block that is in the code to handle our IDisposables. That’s another neat thing happening behind the scenes, but that’s another blog post entirely.</p>

<p>If you would like to see another cool thing in the .NET Framework, you should check out what else you can do with <a href="/post/Null-Reference-Exception-on-Instance-Methods.aspx" target="_blank">Null Instance methods if you change those callvirts</a>.</p>
