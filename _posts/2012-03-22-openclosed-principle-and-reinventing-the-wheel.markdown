---
layout: post
title: "Open/Closed Principle and Reinventing the Wheel"
date: 2012-03-22 11:00:00 -0400
comments: true
published: true
categories: ["Archive"]
tags: ["HudsonSC", "Katas", "Programming Exercises", "Reinventing the Wheel", "Open Closed Principle"]
permalink: "/post/OpenClosed-Principle-and-Reinventing-the-Wheel/"
---
<!-- more -->



<p>This month at the Hudson Software Craftsmanship group, we had two interesting discussions that were spawned from the NimblePros Software Craftsmanship Calendar. The calendar’s topic for March 2011 was the Open/Closed Principle and the topic for March 2012 is Reinventing the Wheel. Keep in mind that 2011 is a calendar of good practices we want to encourage and the 2012 calendar is full of anti-patterns to be avoided.</p>  <p>This post is a recap of some of the stuff we discussed at the March, 2012 HudsonSC meeting.</p>  <h3></h3>  <h3>Reinventing the Wheel</h3>  <p>Going into the meeting, I had the thought that Reinventing the Wheel is obvious when you’re doing it and Open/Closed is less obvious when you’re not following it. Boy was I wrong. The main discussion we had about Reinventing the Wheel was based on “how do I avoid reinventing the wheel in a large, badly organized code base”. We had a lot of very good ideas and suggestions about how we can try to avoid this through tools, communication, and a variety of other methods and ideas. It’s interesting though, because none of them really are the silver bullet that just solves this challenge. If you don’t know if something is already written in the codebase, it can be a real challenge to find.</p>  <h3>Open/Closed Principle</h3>  <p>For the open closed principle, we discussed how we use it, when it’s used, and whether we should start of our code building for open/closed. I think most people came to the consensus that it’s likely not a good idea to use Open/Closed right away, but that we should refactor to it when we’re changing the code. The thought here is that if we change it once, we might need to change it again, so the next time we need to extend it instead of changing it.</p>  <p>Make the code better now and we’ll save ourselves time later. </p>  <h3>Supermarket Checkout Exercise</h3>  <p>As our programming exercise at the end of the day, we decided to do the Supermarket Checkout programming exercise. It is an interesting little challenge that involves some design decisions. This is what makes it interesting. </p>  <p>The exercise has the developers writing a checkout system for a supermarket. Essentially, it’s about calculating the price of the items as their scanned. It factors in discounts, selling by quantity or individually, and selling by weight. This information also needs to be presented to the customer on a receipt at the end of the transaction. This means that you need to figure out how to give the user the needed information in a nice, clean way.</p>  <p>As you work on the code, you have to make some decisions on how the code is going to interact with the customer. Should the discounts appear inline immediately or at the end? Is the discount a separate line item or shown in the price? How do these choices affect how you’re writing the code? Some have you returning information immediately and some have you gathering the information later. How do you adjust your design decisions based on this?</p>  <p>You can find a link to this programming exercise and more on my <a href="/post/Coding-Katas-and-Exercises/" target="_blank">List of Katas and Programming Exercises</a>. And, because I am not a total jerk, I will give you a direct link to the kata pdf in case you don’t want to check out my other blog post.</p>  <p><a href="http://nimblepros.com/media/36760/supermarket%20pricing%20kata.pdf">Supermarket Pricing Coding Exercise</a> (<a href="http://nimblepros.com/media/36763/supermarket%20pricing%20kata%20-%20sample%20output.pdf">Sample Output</a>)</p>  <p>The Sample Output is optional to use. You can also come up with any sample output that you wish to use for it. Change things up. Or do the kata and then pretend that the business rules have changed and now you need to display the information differently.</p>
