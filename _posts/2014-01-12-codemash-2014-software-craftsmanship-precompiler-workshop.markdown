---
layout: post
title: "CodeMash 2014 Software Craftsmanship Precompiler Workshop"
date: 2014-01-12 16:09:00 -0500
comments: true
published: true
categories: ["blog", "archives"]
tags: ["Software Craftsmanship", "Unit Testing", "Agile", "CodeMash"]
permalink: "/post/CodeMash-2014-Software-Craftsmanship-Precompiler-Workshop/"
---
<!-- more -->



<p><a href="http://CodeMash.org" target="_blank">CodeMash</a> 2.0.1.4 started as one of the coldest CodeMashes on record. On Monday, during the set up time for the event, the temperature in Sandusky dropped below negative ten degrees and the wind chill kept it feeling much colder. It was severely lacking in snow, but the cold was enough to cancel many of the Tuesday precompiler sessions whose speakers were not able to arrive at CodeMash on time to run the workshops.</p>
<p>The conference has grown to the point where it now has two initial days of workshops on Tuesday and Wednesday. Then the conference has two normal conference days filled with sessions. Considering that all of my favorite content is always the precompiler workshops on the first two days, I would love to see the conference have workshops through the entire event. I am usually one of the precompiler workshops speakers, so I might be a bit opinionated on that. From another viewpoint though, since I am one of the speakers during that time, I am often wishing I could attend workshops during the same time as mine! I love running the workshops though, so I gladly give up the other ones. I just need to figure out how to be in two plaes at once (future goal).</p>
<h2>CodeMash Precompiler Workshop Details</h2>
<p>For those who attended my and&nbsp;<a href="http://ardalis.com">Steve</a>&rsquo;s Software Craftsmanship precompiler workshops on Wednesday, the weather was much more forgiving. Most people had arrived by that point, which meant that our attendance was also good. This was the fifth year that Steve and I had run this precompiler event at CodeMash. We adjust, change, and update the workshop every year. In the past, we had to teach a lot more about the basics of unit testing, but now more people have at least some knowledge of unit testing.</p>
<p>Over the years of doing this workshop here (and similar ones elsewhere), we've found a lot of good techniques and exercises for working with the attendees of the event. We try and experiement with lots of exercises and katas at conferences, events, and user groups, because we're looking for great ways to teach these types of events. When we run them, we are always trying to make sure that most of the event is spent coding. Through this, our goal is not to give an exercise to the attendees. Our goal is to teach them how they can continue their exercising and learning after they leave the event. That's our goal.</p>
<p>We use a few types of exercises: gateway exercises designed to teach you <em>how</em>&nbsp;to practice, guided exercises leading you down a path slowly with steps for freedom along the way, and open-ended exercises giving great freedom and possibilities in final implementations. As part of the open-ended exercise, we often attempt to use that as a plane up which to build a specific type of implementation. We will choose a principle or a pattern and use this plane as an area in which to practice following the principle or pattern. This shows the students how they can leverage programming exercises as places to learn new principles and patterns.</p>
<h3>Beginning Software Craftsmanship Workshop</h3>
<p>In the morning, we start out our session for beginners just learning software craftmanship. This course is for people familiar with programming (using any language) that want to learn more about software craftsmanship and work on programming exercises with their peers.</p>
<p>As we do every year, I started off the discussion by explaining software craftsmanship and giving an introduction to its concepts. I explain the software craftsmanship manifesto, what it means to developers, and how it relates to the agile manifest. Through this talk, I always make sure to emphasize the importance and reasons for deliberately practicing. As the entire audience will agree, when under a deadline they jump back to their poor practices they know aren't the best. Practice is how we drill ourselves to handle the situation in our own desired way. I make sure that the audience knows as well as discussing and working with others. If I can encourage more people to attend and start software craftsmanship groups, I would consider this talk a great success.</p>
<p><a href="/file.axd?file=2014%2f1%2f00-Software+Craftsmanship.pptx">Introduction to Software Craftsmanship Slides</a></p>
<p>Once we had the reason for why we're all here, we start getting into some of the meat of the workshop. Steve then presented his well-honed talk on software principles. Most of them are designed for object oriented programming, but many are applicable to nearly any language or paradigm. Along the way he of course will cover SOLID, and the slides all contain images from our Software Craftsmanship Calendar. The <a href="/post/2014-Software-Craftsmanship-Calendar.aspx" target="_blank">2014 edition</a> of the <a href="http://gear.telerik.com/">Telerik Software Craftsmanship calendar</a> is out, and everyone at CodeMash received a copy of the calendar.</p>
<p><a href="/file.axd?file=2014%2f1%2f01-Principles.pptx">Software Development Principles Slides</a></p>
<p>While Steve is wrapping up the end of his presentation, I start passing around sheets of paper (yes, real paper) containing a printing of the first exercise we'll be doing. For our first exercise, we were doing FizzBuzz an exercise that is simple enough that it gets people used to the idea of practicing. This is our gateway exercise. We use this to make sure that everyone is set up with their tools. As long as their setup allows them to write code and run tests, it should be good enough. We include some extra credit with these, so that most people can at least get close to finishing the first part of our exercises. Some people will finish the extra credit, which means that we can have nearly everyone reach a stage of accomplishment.&nbsp;</p>
<p>We also ask that the entire group pair up, so that they can work on the exercise with others. This accomplishes quite a few things, including helping those who don't have a computer with them.</p>
<p><a href="/file.axd?file=2014%2f1%2ffizzbuzz+kata.pdf">FizzBuzz Programming Exercise</a></p>
<p>Interrupting everyone's coding is always a challenge, but I make sure to do it nicely. A microphone helps with this! Now that everyone is set up, we take a break from the coding to talk about practices that we promote to the group. The first of these practices is testing. As is still the case, most people are testing or at least familiar with the practice. As a result, I cover this topic briefly making sure to emphasize the different types and their importance. There are still many groups forced to write integration tests instead of unit tests for example. We discuss how to avoid that situation in the afternoon when we discuss more good practices.&nbsp;</p>
<p>The second practice that we discuss is continuous integration, however, since we don't have the time to set these up on everyone's computer, we only discuss this briefly and suggest that people try them.</p>
<p>The third practice is pairing, a practice that we've already had the group start in their first exercise. Not only do I cover the methods of pairing, but I point out all of the good pairing practices that everyone was using without thinking. I then point out the importance of changing partners and typists frequently. In their first programming exercise, very few people change who is typing. Since pairing is such a hard activity, we also make sure to cover all of the things that you can do to improve your pairing by changing the environment in which you're working.</p>
<p><a href="/file.axd?file=2014%2f1%2f02-Practices.pptx">Software Craftsmanship Practices Slides</a></p>
<p>The String Calculator is a guided exercise in which you only read one step at a time. Each step has parts to it, but you do them one at a time. This follows the normal scenario of receiving your requirements a piece at a time. It also keeps you following a plan and gives you a great chance to follow YAGNI. The students do well with this, and it's an exercise that does very well on paper, since you can fold the sheet over the future steps.&nbsp;</p>
<p><a href="/file.axd?file=2014%2f1%2fstring+calculator+kata.pdf">String Calculator Programming Exercise</a></p>
<p><img style="max-width:100%;" src="/image.axd?picture=2014%2f1%2fBSC2014-5.jpg" alt="" /></p>
<h3>Intermediate Software Craftsmanship Agenda Workshop</h3>
<p>After lunch, we started our second workshop. This one is a half-day workshop designed for people who attend the morning workshop or are already somewhat familiar with software craftsmanship, deliberate practice, or who just couldn't fit the morning session into their schedule.&nbsp;</p>
<p>Steve starts off the talking in the afternoon discussing design patterns. Steve is an expert in <a href="http://pluralsight.com/training/Courses/TableOfContents/patterns-library" target="_blank">design patterns</a> and <a href="http://pluralsight.com/training/Courses/TableOfContents/refactoring-fundamentals" target="_blank">refactoring</a>, so he's a great person to present this workshop with. Steve covers a lot of design patterns in this talk. You'll notice that a lot of these patterns have overlap and many of them stem directly from one or more of the principles mentioned in Steve's morning talk. This is not a session to miss!</p>
<p><a href="/file.axd?file=2014%2f1%2f03-Patterns.pptx">Design Patterns Slides</a></p>
<p>Once we're done with the design pattersn talk, we make sure that we start everyone on an open-ended exercise. This year's was the greed dice game scoring exercise where you create code that will score the results of one roll in the greed dice game. It's a simple exercise, but can get a bit unwieldy if you're not refactoring or implementing a good design. We don't suggest that anyone try any specific design for their first attempt.</p>
<p><a href="/file.axd?file=2014%2f1%2fgreed+kata.pdf">Greed Game Programming Exercise</a></p>
<p>We follow up this programming with even more programming practices to follow. I do this talk, which is about more advanced types of testing using mocks, fakes, stubs, etc. We want to make sure everyone knows how to do these. We sometimes do an exercise that can leverage these skills, but we did not this year. We instead showed a quick demo of doing this with a logging system that logs to the file system.</p>
<p><a href="/file.axd?file=2014%2f1%2f04-More+Practices.pptx">Advanced Testing Practices Slides </a></p>
<p>Back to Greed again for the final exercise of the day. We finish out the workshop asking everyone to program the Greed game scorer again. This gives the students the chance to attempt a more complex solution to the problem this time around. We had everyone attempt to implement a Rules Engine for the second attempt, which will allow them to follow the Open/Closed Principle.</p>
<p><img style="max-width:100%;" src="/image.axd?picture=2014%2f1%2fISC2014-1.jpg" alt="" /></p>
<p>Overall we received a lot of wonderful feedback from our students, and I hope that everyone who attended goes on to continue doing what we taught in that workshop. Thank you all for attending. Thanks CodeMash for putting on a wonderful event and inviting me and Steve to run one of your precompiler workshops. It is always a fantastic time! I look forward to seeing more of you there in the future. Have a great 2014!</p>
